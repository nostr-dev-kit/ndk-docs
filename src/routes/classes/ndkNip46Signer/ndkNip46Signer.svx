<script lang='ts'>
    import SectionHeader from '$lib/components/SectionHeader.svelte'
</script>

# NDKNip46Signer

This NDKSigner implements NIP-46, which allows remote signing of events.
This class is meant to be used client-side, paired with the NDKNip46Backend or a NIP-46 backend (like Nostr-Connect)

<SectionHeader title="Constructors" />

<SectionHeader title="constructor" subheader={true} />

```js
const remoteSigner = new NDKNip46Signer(ndk, remotePubkey, localSigner)
```

#### Parameters

| Name | Description | Type | Required? |
| :------ | :------ | :------ | :------ |
| `ndk` | The NDK instance to use | `NDK` | Required |
| `remotePubkey` | The public key of the npub that you want to published as | `string` | Required |
| `localSigner` | The signer that will be used to request events to be signed | `NDKSigner` | Optional |


<SectionHeader title="Properties" />

<SectionHeader title="remotePubkey" subheader={true} />

Required: This is the public key of the npub/user that you want to publish on behalf of.

<SectionHeader title="localSigner" subheader={true} />

Optional: An instance of NDKSigner

<SectionHeader title="Methods" />

<SectionHeader title="blockUntilReady" subheader={true} />

Blocks until the signer is ready and returns the associated NDKUser.

### Returns

`Promise<NDKUser>`

<SectionHeader title="decrypt" subheader={true} />

Decrypts a passed value using the sender's pubkey. This is used, for example, in encrypted DMs.

```js
const nip46Signer = new NDKNip46Signer();
let decryptedString = nip46Signer.decrypt(sendingUser, valueToDecrypt);
```

#### Params

| Name | Description | Type | Required? |
| :------ | :----- | :----- | :----- |
| `sender` | The sender | `NDKUser` | `Required` |
| `value` | The value to decrypt | `string` | `Required` |

#### Returns

`Promise<string>`


<SectionHeader title="encrypt" subheader={true} />

Encrypts a passed value using the recipients pubkey. This is used, for example, in encrypted DMs.

```js
const nip46Signer = new NDKNip46Signer();
let encryptedString = nip46Signer.encrypt(recipientUser, valueToEncrypt);
```

#### Params

| Name | Description | Type | Required? |
| :------ | :----- | :----- | :----- |
| `recipient` | The recipient user | `NDKUser` | `Required` |
| `value` | The value to encrypt | `string` | `Required` |

#### Returns

`Promise<string>`


<SectionHeader title="sign" subheader={true} />

Blocks until the user signs the given Nostr event and returns the signature.

```js
const nip46Signer = new NDKNip46Signer();
let sig = nip46Signer.sign(myEvent);
```

#### Params

| Name | Description | Type | Required? |
| :------ | :----- | :----- | :----- |
| `event` | The event to sign | `NDKEvent` | `Required` |

#### Returns

`string`

<SectionHeader title="user" subheader={true} />

The `getter` for the User property.

#### Returns

`Promise<NDKUser>`

